from django.contrib.auth.models import AbstractUser
from django.db import models

# MODELO DE USUÁRIO
class Aluno(AbstractUser):
    email = models.EmailField(unique=True)
    username = None
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.email

# CURSO
class Curso(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField()
    carga_horaria = models.PositiveIntegerField()

    def __str__(self):
        return self.nome

# MATRÍCULA
class Matricula(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE)
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)
    data_matricula = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('aluno', 'curso')

# MÓDULO
class Modulo(models.Model):
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=100)
    descricao = models.TextField()

    def __str__(self):
        return f"{self.titulo} ({self.curso.nome})"

# AULA
class Aula(models.Model):
    TIPO_CHOICES = (
        ('video', 'Vídeo'),
        ('pdf', 'PDF'),
        ('link', 'Link'),
    )
    modulo = models.ForeignKey(Modulo, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=100)
    tipo = models.CharField(max_length=10, choices=TIPO_CHOICES)
    arquivo = models.FileField(upload_to='aulas/', blank=True, null=True)
    link = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.titulo

# AVALIAÇÃO (apenas leitura)
class Avaliacao(models.Model):
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=100)
    descricao = models.TextField()
    gabarito = models.TextField(blank=True, null=True)  # apenas para visualização

    def __str__(self):
        return self.titulo

# NOTA (consulta)
class Nota(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE)
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=5, decimal_places=2)

    class Meta:
        unique_together = ('aluno', 'curso')

# SERIALIZERS
from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()

class AlunoSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email']

class CursoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Curso
        fields = '__all__'

class ModuloSerializer(serializers.ModelSerializer):
    class Meta:
        model = Modulo
        fields = '__all__'

class AulaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Aula
        fields = '__all__'

class MatriculaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Matricula
        fields = '__all__'

class AvaliacaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Avaliacao
        fields = '__all__'

class NotaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Nota
        fields = '__all__'

# VIEWS
from rest_framework import viewsets, permissions
from rest_framework_simplejwt.views import TokenObtainPairView

class CursoViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Curso.objects.all()
    serializer_class = CursoSerializer
    permission_classes = [permissions.IsAuthenticated]

class ModuloViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = ModuloSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Modulo.objects.filter(curso_id=self.kwargs['curso_pk'])

class AulaViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = AulaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Aula.objects.filter(modulo_id=self.kwargs['modulo_pk'])

class MatriculaViewSet(viewsets.ModelViewSet):
    serializer_class = MatriculaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Matricula.objects.filter(aluno=self.request.user)

    def perform_create(self, serializer):
        serializer.save(aluno=self.request.user)

class AvaliacaoViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = AvaliacaoSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Avaliacao.objects.filter(curso_id=self.kwargs['curso_pk'])

class NotaViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = NotaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Nota.objects.filter(aluno=self.request.user)

# URLS (urls.py)
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from rest_framework_nested import routers
from . import views

router = DefaultRouter()
router.register(r'cursos', views.CursoViewSet, basename='curso')
router.register(r'matriculas', views.MatriculaViewSet, basename='matricula')
router.register(r'notas', views.NotaViewSet, basename='nota')

curso_router = routers.NestedDefaultRouter(router, r'cursos', lookup='curso')
curso_router.register(r'modulos', views.ModuloViewSet, basename='curso-modulos')
curso_router.register(r'avaliacoes', views.AvaliacaoViewSet, basename='curso-avaliacoes')

modulo_router = routers.NestedDefaultRouter(curso_router, r'modulos', lookup='modulo')
modulo_router.register(r'aulas', views.AulaViewSet, basename='modulo-aulas')

urlpatterns = [
    path('api/', include(router.urls)),
    path('api/', include(curso_router.urls)),
    path('api/', include(modulo_router.urls)),
    path('api/auth/', include('rest_framework_simplejwt.urls')),
]

# SETTINGS (trechos importantes)
# settings.py
AUTH_USER_MODEL = 'seuapp.Aluno'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}
